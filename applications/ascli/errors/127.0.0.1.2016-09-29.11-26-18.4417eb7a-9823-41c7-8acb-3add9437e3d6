(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'Ning\\xc3\\xban dato disponible en esta tabla'"
p3
sS'layer'
p4
S'C:\\Users\\1229601\\Documents\\web2py\\applications\\ascli\\controllers/ventas.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\ndef index():\n\n    import json\n\n    # Select all the records, to show how\n    # datatables.net paginates.\n    # Rows can\'t be serialized because they contain\n    # an open database connection. Use as_list()\n    # to serialize the query result.\n    seleccionados = db(db.tbconfigura).select().first()\n    if seleccionados==None:\n        patron=\'0\'\n    else:\n        patron= seleccionados.IdUbicacion\n        fventa = json.dumps(db(db.tbtmp_linea_venta.IdUbicacion==patron).select(db.tbtmp_linea_venta.IdProducto,db.tbtmp_linea_venta.NombreProducto,db.tbtmp_linea_venta.Cantidad,db.tbtmp_linea_venta.ValorTotalProducto,db.tbtmp_linea_venta.ValorIva,db.tbtmp_linea_venta.PorcentajeDescuento,db.tbtmp_linea_venta.IdUbicacion).as_list())\n    return dict(results=XML(fventa))\n\n\ndef seleccion_cliente():\n    if not request.vars.txtcliente: return \'\'\n\n    patron = request.vars.txtcliente.capitalize() + \'%\'\n    seleccionados = [registro.NitEmpresa + \'|\' + registro.Empresa for registro in\n                     db(db.tbClientes.Empresa.like(patron)).select()]\n\n    return \'\'.join([DIV(k,\n                 _onclick="jQuery(\'#txtcliente\').val(\'%s\')" % k,\n                 _onmouseover="this.style.backgroundColor=\'yellow\'",\n                 _onmouseout="this.style.backgroundColor=\'white\'"\n                 ).xml() for k in seleccionados])\n\ndef Buscar_Nit_Cliente():\n    if not request.vars.txtcliente: return \'\'\n\n    patron = request.vars.txtcliente\n    seleccionados = db(db.tbClientes.NitEmpresa==patron).select(db.tbClientes.Empresa).first()\n    if seleccionados==None:\n        patron=\'No existe el Cliente\'\n    else:\n        patron=seleccionados.Empresa\n\n    return patron\n\ndef seleccion_Producto():\n    if not request.vars.txtproducto: return \'\'\n\n    patron = request.vars.txtproducto.capitalize() + \'%\'\n    seleccionados = [str(registro.IdProducto) + \'|\' + registro.Nombre + \'|\' + str(registro.PrecioUnitVenta) + \'|\' + str(registro.PorcentajeIva)  for registro in\n                     db(db.tbProductos.Nombre.like(patron)).select()]\n\n    return \'\'.join([DIV(k,\n                 _onclick="jQuery(\'#txtproducto\').val(\'%s\')" % k,\n                 _onmouseover="this.style.backgroundColor=\'yellow\'",\n                 _onmouseout="this.style.backgroundColor=\'white\'"\n                 ).xml() for k in seleccionados])\n\ndef Buscar_Producto():\n    if not request.vars.txtproducto: return \'\'\n\n    patron = request.vars.txtproducto\n    seleccionados = db(db.tbProductos.IdProducto==patron).select().first()\n    if seleccionados==None:\n        patron=\'0\'\n    else:\n        patron= str(seleccionados.IdProducto) + \'|\' + seleccionados.Nombre + \'|\' + str(seleccionados.PrecioUnitVenta) + \'|\' + str(seleccionados.PorcentajeIva)\n    return patron\n\n# Agraga registros a la tabla temporal de las facturas\ndef Agregar_Producto_tmp():\n\n#db.tbtmp_linea_venta.IdProducto,db.tbtmp_linea_venta.NombreProducto,db.tbtmp_linea_venta.Cantidad,db.tbtmp_linea_venta.ValorTotalProducto,db.tbtmp_linea_venta.ValorIva,db.tbtmp_linea_venta.PorcentajeDescuento\n    #try:\n        cadenav = request.vars.cadenaproducto\n        cadenav1 = cadenav.split("|")\n        #Siempre se borra el producto que se va a agregar para garantizar que existe uno solo\n        db(db.tbtmp_linea_venta.IdProducto==cadenav1[0],db.tbtmp_linea_venta.IdUbicacion==cadenav1[6]).delete()\n\n        db.tbtmp_linea_venta.insert(IdProducto=cadenav1[0],\n                        NombreProducto=cadenav1[1],\n                        Cantidad=cadenav1[3],\n                        ValorTotalProducto=cadenav1[2],\n                        ValorIva=cadenav1[5],\n                        PorcentajeDescuento=cadenav1[4],\n                        IdUbicacion= cadenav1[6],\n                        IdVenta=1\n        )\n\n    #except:\n        #return "Error"\n    #else:\n       # return "Ok"\n\ndef Eliminar_linea_Producto():\n\n    cadenav = request.vars.cadenaproducto\n    cadenav1 = cadenav.split("|")\n    #db.tbtmp_linea_venta.delete(IdProducto==cadenav1[0], IdUbicacion==cadenav1[1])\n    db(db.tbtmp_linea_venta.IdProducto==cadenav1[0],db.tbtmp_linea_venta.IdUbicacion==cadenav1[0]).delete()\n\n\n# Agraga registros a la tabla de las facturas\ndef Guardar_Factura():\n\n#insert into tbLinea_Venta (IdVenta, IdProducto, IdUbicacion, Cantidad, ValorTotalProducto, ValorIva, PorcentajeDescuento) select IdVenta, IdProducto, IdUbicacion, Cantidad, ValorTotalProducto, ValorIva, PorcentajeDescuento from tbtmp_linea_venta where IdUbicacion=\'1\'\n\n        #cadenav = request.vars.cadenaproducto\n        #cadenav1 = cadenav.split("|")\n        #Siempre se borra el producto que se va a agregar para garantizar que existe uno solo\n    db.executesql(\'insert into tbLinea_Venta (IdVenta, IdProducto, IdUbicacion, Cantidad, ValorTotalProducto, ValorIva, PorcentajeDescuento) select IdVenta, IdProducto, IdUbicacion, Cantidad, ValorTotalProducto, ValorIva, PorcentajeDescuento from tbtmp_linea_venta where IdUbicacion="1";\')\n\n    db(db.tbtmp_linea_venta.IdUbicacion=="1").delete()\n\nresponse._vars=response._caller(Eliminar_linea_Producto)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\1229601\\Documents\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\1229601\\Documents\\web2py\\applications\\ascli\\controllers/ventas.py", line 115, in <module>\n  File "C:\\Users\\1229601\\Documents\\web2py\\gluon\\globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\1229601\\Documents\\web2py\\applications\\ascli\\controllers/ventas.py", line 100, in Eliminar_linea_Producto\n    db(db.tbtmp_linea_venta.IdProducto==cadenav1[0],db.tbtmp_linea_venta.IdUbicacion==cadenav1[0]).delete()\n  File "C:\\Users\\1229601\\Documents\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 2040, in delete\n    ret = db._adapter.delete(tablename, self.query)\n  File "C:\\Users\\1229601\\Documents\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py", line 103, in delete\n    deleted = [x[table._id.name] for x in db(query).select(table._id)]\n  File "C:\\Users\\1229601\\Documents\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "C:\\Users\\1229601\\Documents\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py", line 123, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "C:\\Users\\1229601\\Documents\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "C:\\Users\\1229601\\Documents\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1170, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "C:\\Users\\1229601\\Documents\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "C:\\Users\\1229601\\Documents\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "C:\\Users\\1229601\\Documents\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "C:\\Users\\1229601\\Documents\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1435, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'Ning\\xc3\\xban dato disponible en esta tabla\'\n'
p11
s.